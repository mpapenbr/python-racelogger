on:
  workflow_dispatch:

name: Test workflow for producing release artifacts

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Prep
        id: prep
        shell: bash
        run: |

          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
                    
          echo "version=${VERSION}" >> $GITHUB_OUTPUT          
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Prepare bootloader
        shell: bash
        # we need this step in order to get a "unique" installer signature that hopefully doesn't produce a virus warning
        # if this step is not done, many anti virus tools may complain with heuristic virus detection messages
        # source: https://python.plainenglish.io/pyinstaller-exe-false-positive-trojan-virus-resolved-b33842bd3184
        run: |
          pip install wheel
          export PYI_VERSION=5.11.0
          CURDIR=$PWD && \
          mkdir -p tmp && cd tmp && \
          curl --location --remote-name https://github.com/pyinstaller/pyinstaller/archive/refs/tags/v$PYI_VERSION.tar.gz && \
          tar xfz v$PYI_VERSION.tar.gz && \
          cd pyinstaller-$PYI_VERSION/bootloader && \
          python ./waf all --target-arch=64bit && \
          cd $CURDIR
          cd tmp/pyinstaller-$PYI_VERSION && pip install .

      - name: do local install
        run: |
          pip install -e .

      - name: Build pyinstaller
        run: |
          pyinstaller --clean --noconfirm --name racelogger --onefile src/racelogger/__main__.py
          pyinstaller --clean --noconfirm --distpath dist2 --name racelogger --onedir src/racelogger/__main__.py

      - name: Prepare single exe release asset
        shell: bash
        run: |
          mkdir -p assets && \
          cp ./dist/racelogger.exe assets && \
          cp ./racelogger.ini.sample assets/racelogger.ini && \
          cp ./logging.conf assets/logging.conf

      - name: Prepare release asset for dir
        shell: bash
        run: |
          mkdir -p assets2 && \
          cp -R ./dist2/* assets2 && \
          cp ./racelogger.ini.sample assets2/racelogger.ini && \
          cp ./logging.conf assets2/logging.conf

      - name: Create single exe zip
        shell: bash
        run: |
          cd assets && 7z a racelogger.zip *

      - name: Use gh release
        run: gh release create test -t test-release -p ${{ github.workspace }}/assets/racelogger.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
